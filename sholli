#!/bin/bash

# Urls
readonly base_url="https://bimasislam.kemenag.go.id"

# App Info
readonly app_version="0.3.1"
readonly app_name="sholli"
readonly app_title="${app_name^} v${app_version}"

readonly root_dir="${HOME}/.local/share/${app_name}"
readonly meta_dir="${root_dir}/meta"
readonly audio_dir="${root_dir}/audio"
readonly adzan_dir="${audio_dir}/adzan"
readonly config_file="${root_dir}/config"

usage() {
    printf '%s\n' \
        "░█▀▀░█░█░█▀█░█░░░█░░░▀█▀" \
        "░▀▀█░█▀█░█░█░█░░░█░░░░█░" \
        "░▀▀▀░▀░▀░▀▀▀░▀▀▀░▀▀▀░▀▀▀" \
        "${app_name} - Tool CLI pengingat waktu sholat berdasarkan perhitungan KEMENAG RI" \
        "Usage: ${app_name} SUBCOMMAND [OPTIONS]" \
        "" \
        "Sub-command:" >&2

    printf '  %s\n    %s\n' \
        "adzan" "Memainkan suara adzan." \
        "cek" "Memeriksa waktu adzan terdekat." \
        "clean" "Membersihkan cache." \
        "update [<bulan> <tahun>]" "Mengambil data jadwal terbaru dari website bimasislam." \
        "init" "Mengkonfigurasi ${app_name} terkait penentuan lokasi, rentang pengingat waktu, dsb." \
        "" "" >&2

    exit
}

notify() { notify-send "$@" "$app_title"; }

play_adzan() { 
    adzan="default.mp3"
    adzan_file="${adzan_dir}/${adzan}"
    lock_file="/tmp/${app_name}_adzan"

    if [[ -f "$lock_file" ]]; then
        printf '%s\n' "Adzan sedang berlangsung." >&2
        exit
    fi
    
    if [[ -f $adzan_file ]]; then
        touch "$lock_file"
        paplay "$adzan_file"
        rm "$lock_file"
    fi
}

play_notification() {
    audio_file="${audio_dir}/${1}-${2}menit.mp3"
    [[ -f $audio_file ]] && paplay "$audio_file"
}

load_config() {
    if [[ ! -f "$config_file" ]]; then
        printf '%s\n' \
            "File konfig belum ada. Silakan inisialisasi terlebih dahulu:" \
            " $app_name init" >&2

        exit
    fi

    . "$config_file"
}

time_delta() {
    local compare="$1"
    local current="${2:-$(date +%s)}"

    echo $(( compare - current ))
}

get_cookie() {
    cookie_file="$(mktemp -u /tmp/XXXX)"
    curl -Sso /dev/null -c "$cookie_file" "$base_url"
    [[ -s "$cookie_file" ]] && echo "$cookie_file"
}

anykey() {
    read -n1 -rp "$@"
    printf '\n'
}

yesno() {
    local str="$1"
    while read -n1 -rp "${str} [y/N] ? "; do
        case "$REPLY" in
            Y|y) return 1 ;;
            N|n|"") return 0 ;;
        esac
    done
}

yesno_true() {
    local str="$1"
    while read -n1 -rp "${str} [y/N] ? "; do
        case "$REPLY" in
            Y|y) printf '%s\n' "true";  echo >&2; break ;;
            N|n) printf '%s\n' "false"; echo >&2; break ;;
            "")  printf '%s\n' "false"; break ;;
        esac
    done
}

choose_option() {
    local str="$1"
    local data="$2"
    local x=0
    local result

    while read -rp "Masukkan nama ${str^} [gunakan \`.\` untuk lihat semua]: "; do
        [[ $REPLY ]] && search="${REPLY^^}" && break
        printf '%s\n' "Input tidak valid" >&2
    done

    [[ $search == "." ]] && search=""
    readarray -t result < <(pup ":contains(\"${search}\") text{}" <<< "$data" | sed 's/^ *//; s/ *$//; /^$/d' | sort)
    if [[ ${#result[@]} -gt 1 ]]; then
        printf '%s\n' "Ada lebih dari 1 ${str^} dengan kata kunci \"${REPLY}\":" >&2
        for element in "${result[@]}"; do
            printf ' %d) %s\n' "$(( ++x ))" "${element}" >&2
        done
        while read -rp "Pilih 1 s/d ${#result[@]}: "; do
            if [[ ! $REPLY =~ [1-9] ]] || [[ $REPLY -lt 1 ]] || [[ $REPLY -gt "${#result[@]}" ]]; then
                printf '%s\n' "Silakan inputkan angka dari 1 s/d ${#result[@]}" >&2
                continue
            fi
            break
        done

        choice="${result[$(( REPLY - 1 ))]}"
    else
        choice="${result[0]}"
    fi

    printf '%s\n' "${str^} terpilih: $choice" >&2

    unset result
    readarray -t result < <(pup ":contains(\"${choice}\") attr{value}" <<< "$data" | sed 's/^ *//; s/ *$//; /^$/d')

    if [[ -z "${result[*]}" ]]; then
        printf '%s\n' "Gagal mengambil ID." >&2
        exit 2
    fi

    printf '%s\n' "${result[0]}"
}

init() {
    if [[ -f "$config_file" ]]; then
        yesno "File konfigurasi sudah ada. Atur ulang" && exit 
    fi

    printf '%s\n' \
        "" \
        "  ░█▀▀░█░█░█▀█░█░░░█░░░▀█▀" \
        "  ░▀▀█░█▀█░█░█░█░░░█░░░░█░" \
        "  ░▀▀▀░▀░▀░▀▀▀░▀▀▀░▀▀▀░▀▀▀" \
        "" \
        "Menginisiasi file konfigurasi." \
        "Silakan jawab pertanyaan yang muncul:" \
        "[Enter]"
    anykey ""

    mkdir -p "$adzan_dir"
    mkdir -p "$meta_dir"

    cookie=$(get_cookie)
    data_prov=$(curl -Ss -b "$cookie" "${base_url}/jadwalshalat" | pup 'select[id="search_prov"]')
    prov_id="$(choose_option "provinsi" "$data_prov")"
    data_kota=$(curl -Ss -b "$cookie" --data "x=$prov_id" "${base_url}/ajax/getKabkoshalat")
    kota_id="$(choose_option "kota/kabupaten" "$data_kota")"

    printf '%s\n' "Pengingat sebelum waktu adzan dalam hitungan menit"
    while read -rp "(spasi untuk lebih dari 1): "; do
        [[ $REPLY =~ ([0-9]{1,2} ?)+ ]] && break
    done
    pengingat="$REPLY"

    imsak=$(yesno_true "Pengingat waktu imsak")
    syuruq=$(yesno_true "Pengingat waktu syuruq")
    dhuha=$(yesno_true "Pengingat waktu dhuha")

    printf '%s="%s"\n' \
        "id_prov" "$prov_id" \
        "id_kota" "$kota_id" \
        "pengingat" "$pengingat" \
        "imsak" "$imsak" \
        "terbit" "$syuruq" \
        "dhuha" "$dhuha" > "$config_file"

    rm "$cookie" > /dev/null 2>&1
}

update_jadwal() {
    local bulan="${1:-$(date +%m)}"
    local tahun="${2:-$(date +%Y)}"
    local cookie output_file api_url

    api_url="${base_url}/ajax/getShalatbln"
    cookie=$(get_cookie)
    output_file="${bulan}-${tahun}.json"

    load_config

    # Fetch data
    printf '%s\n' "Getting event times data..."
    curl -Ss -b "$cookie" "$api_url" \
        --data "x=${id_prov}" \
        --data "y=${id_kota}" \
        --data "bln=${bulan}" \
        --data "thn=${tahun}" | jq > "${meta_dir}/${output_file}"

    printf '%s\n' "Prayer time data has been saved as \"${meta_dir}/${output_file}\" in \"${root_dir}\""

    rm -f "$cookie"
    clean
}

clean() {  rm "/tmp/${app_name}_"*; }

check_time() {
    local bulan tahun data_file cur_date
    local next_event next_time reminders time_keeper

    load_config

    cur_date=${1:-$(date +%Y-%m-%d)}
    time_keeper="/tmp/${app_name}_next"
    readarray -d ' ' -t reminders <<< "$pengingat"

    month=$(date -d "$cur_date" +%m)
    year=$(date -d "$cur_date" +%Y)
    data_file="${meta_dir}/${month}-${year}.json"

    [[ ! -f $data_file ]] && update_jadwal "$month" "$year"

    time_keys="$(jq -r ".data.\"$cur_date\" | del(.tanggal) | to_entries[].key" "$data_file")"
    min_delta=9999999

    if [[ ! -f $time_keeper ]]; then
        for key in $time_keys; do
            case "$key" in
                imsak|terbit|dhuha) [[ "${!key}" == "false" ]] && continue ;;
            esac

            target_time=$(date -d "$cur_date $(jq -r ".data.\"$cur_date\".$key" "$data_file")" +%s)
            delta=$(time_delta "$target_time")
            [[ $delta -lt 0 ]] && continue

            # Find the smallest delta to get the next nearest event
            if [[ $delta -lt $min_delta ]]; then
                min_delta="$delta"
                next_event="$key"
                next_epoch="$target_time"
            fi
        done

        if [[ "$next_epoch" && "$next_event" ]]; then
            printf '%s\n' "$next_epoch" "$next_event" > "$time_keeper"
        fi
    else
        next_epoch="$(head -1 "$time_keeper")"
        next_event="$(tail -1 "$time_keeper")"
    fi
    next_time=$(date -d @"$next_epoch" +%k:%M)

    # Reminder
    for m in "${reminders[@]}"; do
        case "${next_event,,}" in (imsak|terbit|dhuha) continue ;; esac

        secs=$(( m * 60 ))
        reminding_time=$(( next_epoch - secs ))
        reminding_time=$(date -d @"$reminding_time" +%k:%M)

        if [[ $(date +%k:%M) == "$reminding_time" ]]; then
            notify "Memasuki waktu ${next_event} dalam ${m} menit. ${next_event}: ${next_time}"
            play_notification "$next_event" "$m"
        fi
    done

    # If it's the time, then play adzan
    if [[ $(date +%k:%M) == "$next_time" ]]; then
        case "${next_event,,}" in
            imsak|terbit|dhuha) 
                notify "Memasuki waktu ${next_event}"
                return
                ;;
        esac

        notify "Waktunya sholat ${next_event}"
        play_adzan
        rm "$time_keeper"
    # Otherwise,
    # If next event is empty, means today's event has already been all passed
    elif [[ -z "$next_event" ]]; then
        check_time "$(date -d "$cur_date + 1 day" +%Y-%m-%d)"
    # Otherwise,
    # Prints the next event time
    else
        delta=$(time_delta "$next_epoch")
        rem_hours=$(( delta / 3600 ))
        rem_minutes=$(( (delta % 3600) / 60 ))

        case "${next_event,,}" in
            imsak|terbit|dhuha)
                printf 'Waktu %s hari ini pada: %s\n' "${next_event^}" "$next_time"
                ;;
            *)
                printf 'Waktu sholat selanjutnya: %s @%s\n' "${next_event^^}" "$next_time"
                ;;
        esac

        printf 'dalam %d jam %d menit lagi.\n' "$rem_hours" "$rem_minutes"
    fi
}

main() {
    cmd="$1"
    shift

    [[ -z "$cmd" ]] && usage
    case "$cmd" in
        init) init ;;
        cek) check_time ;;
        clean) clean ;;
        update) update_jadwal "$@" ;;
        *) usage ;;
    esac
}

main "$@"
